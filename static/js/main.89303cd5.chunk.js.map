{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/Header.js","actions.js","constants.js","containers/App.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","react_default","a","createElement","className","src","this","props","id","alt","name","email","Component","CardList","robots","cardComponent","map","user","i","components_Card","key","SearchBox","searchChange","type","placeholder","onChange","aria-label","Scroll","children","Header","nextProps","nextState","requestRobots","dispatch","fetch","then","response","json","data","payload","catch","err","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLocaleLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_CardList","connect","state","searchRobots","error","event","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","concat","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.89303cd5.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\n\r\nclass Card extends Component{\r\n    render(){\r\n        return(\r\n            <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n                <img src={'https://robohash.org/' + this.props.id} alt='bot'/>\r\n                <div>\r\n                    <h2>{this.props.name}</h2>\r\n                    <p>{this.props.email}</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Card;","import React, {Component} from 'react';\r\nimport Card from './Card';\r\n\r\nclass CardList extends Component{\r\n    render(){\r\n        const {robots} = this.props;\r\n        const cardComponent = robots.map((user, i) => \r\n            <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\r\n        );\r\n        return(\r\n            <div>\r\n                {cardComponent}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CardList;","import React, {Component} from 'react';\r\n\r\nclass SearchBox extends Component{\r\n    render(){\r\n        const {searchChange} = this.props;\r\n        return(\r\n            <div className='pa2'>\r\n                <input \r\n                    className=\"pa3 ba b--green bg-lightest-blue\"\r\n                    type='search'\r\n                    placeholder='Search Robots'\r\n                    onChange={searchChange}\r\n                    aria-label=\"search\"\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchBox;","import React, {Component} from 'react'\r\n\r\nimport './scroll.css'\r\n\r\nclass Scroll extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"scrollDiv\">\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react'\r\n\r\nclass Header extends Component {\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        return false;\r\n    }\r\n    render(){\r\n        return <h1 className=\"f1\">RoboFriends</h1>;\r\n    }\r\n}\r\n\r\nexport default Header;","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING, \r\n    REQUEST_ROBOTS_SUCCESS, \r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text,\r\n});\r\n\r\nexport const requestRobots = (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n        .catch(err => dispatch({type:REQUEST_ROBOTS_FAILED, payload: err}));\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport Header from '../components/Header';\r\n\r\nimport {setSearchField, requestRobots} from '../actions';\r\n\r\nimport './App.css'\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return{\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots)\r\n    }\r\n}\r\n\r\nclass App extends Component{\r\n\r\n    componentDidMount(){\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render(){\r\n        const {searchField, onSearchChange, robots, isPending} = this.props;\r\n        const filteredRobots = robots.filter(robot =>{\r\n            return robot.name.toLocaleLowerCase().includes(searchField.toLocaleLowerCase());\r\n        });\r\n        if (isPending) return <h1>Loading...</h1>\r\n        else{\r\n            return(\r\n                <div className=\"tc\">\r\n                    <Header />\r\n                    <SearchBox searchChange={onSearchChange}/>\r\n                    <Scroll>\r\n                        <CardList robots={filteredRobots}/>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING, \r\n    REQUEST_ROBOTS_SUCCESS, \r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\nconst initialStateSearch = {\r\n    searchField: '',\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.payload})\r\n        default: return state\r\n    }\r\n}\r\n\r\nconst initialStateRobots= {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending: true})\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robots: action.payload,\r\n                                            isPending: false})    \r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {error: action.payload,\r\n                                            isPending: false})\r\n        default: return state\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux'\r\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\r\nimport {createLogger} from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nimport { searchRobots, requestRobots } from './reducers';\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({searchRobots, requestRobots})\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\r\n\r\nReactDOM.render(<Provider store={store}>\r\n                    <App />\r\n                </Provider>, document.getElementById('root'));\r\nserviceWorker.register();\r\n\r\n"],"sourceRoot":""}
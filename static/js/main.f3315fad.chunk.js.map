{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/Header.js","actions.js","constants.js","containers/App.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","react_default","a","createElement","className","src","this","props","id","alt","name","email","Component","CardList","robots","cardComponent","map","user","i","components_Card","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","children","Header","nextProps","nextState","requestRobots","dispatch","fetch","then","response","json","data","payload","catch","err","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLocaleLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_CardList","connect","state","searchRobots","error","event","target","value","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f3315fad.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\n\r\nclass Card extends Component{\r\n    render(){\r\n        return(\r\n            <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n                <img src={'https://robohash.org/' + this.props.id} alt='bot'/>\r\n                <div>\r\n                    <h2>{this.props.name}</h2>\r\n                    <p>{this.props.email}</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Card;","import React, {Component} from 'react';\r\nimport Card from './Card';\r\n\r\nclass CardList extends Component{\r\n    render(){\r\n        const {robots} = this.props;\r\n        const cardComponent = robots.map((user, i) => \r\n            <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\r\n        );\r\n        return(\r\n            <div>\r\n                {cardComponent}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CardList;","import React, {Component} from 'react';\r\n\r\nclass SearchBox extends Component{\r\n    render(){\r\n        const {searchChange} = this.props;\r\n        return(\r\n            <div className='pa2'>\r\n                <input \r\n                    className=\"pa3 ba b--green bg-lightest-blue\"\r\n                    type='search'\r\n                    placeholder='Search Robots'\r\n                    onChange={searchChange}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchBox;","import React, {Component} from 'react'\r\n\r\nimport './scroll.css'\r\n\r\nclass Scroll extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"scrollDiv\">\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react'\r\n\r\nclass Header extends Component {\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        return false;\r\n    }\r\n    render(){\r\n        return <h1 className=\"f1\">RoboFriends</h1>;\r\n    }\r\n}\r\n\r\nexport default Header;","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING, \r\n    REQUEST_ROBOTS_SUCCESS, \r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text,\r\n});\r\n\r\nexport const requestRobots = (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n        .catch(err => dispatch({type:REQUEST_ROBOTS_FAILED, payload: err}));\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport Header from '../components/Header';\r\n\r\nimport {setSearchField, requestRobots} from '../actions';\r\n\r\nimport './App.css'\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return{\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots)\r\n    }\r\n}\r\n\r\nclass App extends Component{\r\n\r\n    componentDidMount(){\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render(){\r\n        const {searchField, onSearchChange, robots, isPending} = this.props;\r\n        const filteredRobots = robots.filter(robot =>{\r\n            return robot.name.toLocaleLowerCase().includes(searchField.toLocaleLowerCase());\r\n        });\r\n        if (isPending) return <h1>Loading...</h1>\r\n        else{\r\n            return(\r\n                <div className=\"tc\">\r\n                    <Header />\r\n                    <SearchBox searchChange={onSearchChange}/>\r\n                    <Scroll>\r\n                        <CardList robots={filteredRobots}/>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING, \r\n    REQUEST_ROBOTS_SUCCESS, \r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\nconst initialStateSearch = {\r\n    searchField: '',\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.payload})\r\n        default: return state\r\n    }\r\n}\r\n\r\nconst initialStateRobots= {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending: true})\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robots: action.payload,\r\n                                            isPending: false})    \r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {error: action.payload,\r\n                                            isPending: false})\r\n        default: return state\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux'\r\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\r\nimport {createLogger} from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nimport { searchRobots, requestRobots } from './reducers';\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({searchRobots, requestRobots})\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\r\n\r\nReactDOM.render(<Provider store={store}>\r\n                    <App />\r\n                </Provider>, document.getElementById('root'));\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}